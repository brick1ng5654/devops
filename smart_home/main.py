import requests
import pandas as pd
from io import BytesIO
import json
from vk_token import vk_token, group_id

# üîë –¢–≤–æ–π —Ç–æ–∫–µ–Ω –∏ ID –≥—Ä—É–ø–ø—ã
VK_ACCESS_TOKEN = vk_token
GROUP_ID = group_id  # –î–ª—è –≥—Ä—É–ø–ø –Ω—É–∂–µ–Ω –º–∏–Ω—É—Å –ø–µ—Ä–µ–¥ ID!
API_VERSION = "5.131"

def get_schedule_from_wall():
    """–ò—â–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ xls-—Ñ–∞–π–ª –≤ –ø–æ—Å—Ç–∞—Ö –≥—Ä—É–ø–ø—ã."""
    url = "https://api.vk.com/method/wall.get"
    params = {
        "owner_id": f"-{GROUP_ID}",
        "count": 10,  # –ü—Ä–æ–≤–µ—Ä—è–µ–º 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤
        "access_token": VK_ACCESS_TOKEN,
        "v": API_VERSION
    }
    
    response = requests.get(url, params=params).json()
    
    if "response" in response and "items" in response["response"]:
        for post in response["response"]["items"]:
            if "attachments" in post:
                for attachment in post["attachments"]:
                    if attachment["type"] == "doc" and attachment["doc"]["ext"] in ["xls", "xlsx"]:
                        print(f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {attachment['doc']['title']}")
                        return attachment["doc"]["url"]
    
    return None

def download_and_parse_xls(url):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç xls-—Ñ–∞–π–ª —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏."""
    response = requests.get(url)
    if response.status_code != 200:
        return None

    # –ß–∏—Ç–∞–µ–º Excel –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    try:
        df = pd.read_excel(BytesIO(response.content), sheet_name="  2 –∏–Ω—Å—Ç.")
        column_data = df.iloc[:, 4].fillna('<<EMPTY>>').astype(str).tolist()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return None

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    schedule = []
    days_of_week = ['–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', '–í–¢–û–†–ù–ò–ö', '–°–†–ï–î–ê', '–ß–ï–¢–í–ï–†–ì', '–ü–Ø–¢–ù–ò–¶–ê', '–°–£–ë–ë–û–¢–ê']
    current_group = None
    current_date = None
    current_day = []
    day_counter = 0

    for item in column_data:
        item = item.strip().replace('<<EMPTY>>', '')
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥—Ä—É–ø–ø–µ –≤ —Ç–µ–ª–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        if "203 (—é–≤–µ–ª–∏—Ä—ã) (6)" in item and not ('-' in item and '.' in item):
            continue
            
        # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        if '-' in item and '.' in item:
            if current_date is not None:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –±–ª–æ–∫–∞
                if current_day:
                    schedule[-1]['days'].append(process_day(current_day, day_counter, days_of_week))
            
            # –ù–æ–≤—ã–π –±–ª–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            parts = item.split('\n')
            schedule.append({
                'date_range': parts[0],
                'group': parts[1] if len(parts) > 1 else '',
                'days': []
            })
            current_date = parts[0]
            day_counter = 0
            current_day = []
            continue
            
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–Ω–µ–π
        if not item:
            if current_day:
                schedule[-1]['days'].append(process_day(current_day, day_counter, days_of_week))
                day_counter += 1
                current_day = []
            continue
            
        current_day.append(item)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è
    if current_day:
        schedule[-1]['days'].append(process_day(current_day, day_counter, days_of_week))

    return schedule

def process_day(day_data, day_number, days_list):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–≥–æ –¥–Ω—è –≤ —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤."""
    lessons = []
    for i in range(0, len(day_data), 2):
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        subject = day_data[i] if i < len(day_data) else ''
        details = day_data[i+1] if i+1 < len(day_data) else ''
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–æ—á–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        if any(keyword in subject for keyword in ["203 (—é–≤–µ–ª–∏—Ä—ã) (6)", "—é–≤–µ–ª–∏—Ä—ã", "(6)"]):
            continue
            
        if subject and details:  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –µ—Å—Ç—å –∏ –ø—Ä–µ–¥–º–µ—Ç, –∏ –¥–µ—Ç–∞–ª–∏
            lessons.append(f"{subject} - {details}")
    
    return {
        'day_name': days_list[day_number] if day_number < len(days_list) else f'–î–ï–ù–¨_{day_number+1}',
        'lessons': lessons
    }

def save_data_to_json(data, filename="schedule.json"):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Home Assistant."""
    if not data:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏!")
        return

    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON
    json_data = {
        "date": data[0]['date_range'],  # –ë–µ—Ä–µ–º –¥–∞—Ç—É –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –±–ª–æ–∫–∞
        "group": data[0]['group'],      # –ë–µ—Ä–µ–º –≥—Ä—É–ø–ø—É –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –±–ª–æ–∫–∞
        "schedule": {}
    }

    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º
    for block in data:
        for day in block['days']:
            json_data["schedule"][day['day_name']] = day['lessons']

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON-—Ñ–∞–π–ª
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(json_data, f, ensure_ascii=False, indent=2)
    print(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
xls_url = get_schedule_from_wall()
if xls_url:
    column_data = download_and_parse_xls(xls_url)
    save_data_to_json(column_data, "schedule.json")
else:
    print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")